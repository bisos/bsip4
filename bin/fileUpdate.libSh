# Library


IcmBriefDescription="NOTYET: Short Description Of The Module"

ORIGIN="
* Revision And Libre-Halaal CopyLeft -- Part Of ByStar -- Best Used With Blee
"

####+BEGIN: bx:bash:top-of-file :vc "cvs" partof: "bystar" :copyleft "halaal+brief"

####+END:

__author__="
* Authors: Mohsen BANAN, http://mohsen.banan.1.byname.net/contact
"

_CommentBegin_
####+BEGIN: bx:dblock:global:file-insert-cond :cond "./blee.el" :file "/libre/ByStar/InitialTemplates/software/plusOrg/dblock/inserts/topControls.org"
*  /Controls/ ::  [[elisp:(org-cycle)][| ]]  [[elisp:(show-all)][Show-All]]  [[elisp:(org-shifttab)][Overview]]  [[elisp:(progn (org-shifttab) (org-content))][Content]] | [[file:Panel.org][Panel]] | [[elisp:(blee:ppmm:org-mode-toggle)][Nat]] | [[elisp:(bx:org:run-me)][Run]] | [[elisp:(bx:org:run-me-eml)][RunEml]] | [[elisp:(delete-other-windows)][(1)]] | [[elisp:(progn (save-buffer) (kill-buffer))][S&Q]]  [[elisp:(save-buffer)][Save]]  [[elisp:(kill-buffer)][Quit]] [[elisp:(org-cycle)][| ]]
** /Version Control/ ::  [[elisp:(call-interactively (quote cvs-update))][cvs-update]]  [[elisp:(vc-update)][vc-update]] | [[elisp:(bx:org:agenda:this-file-otherWin)][Agenda-List]]  [[elisp:(bx:org:todo:this-file-otherWin)][ToDo-List]]
####+END:
_CommentEnd_

_CommentBegin_
*      ================
*  [[elisp:(beginning-of-buffer)][Top]] ################ [[elisp:(delete-other-windows)][(1)]] CONTENTS-LIST ################
*  [[elisp:(org-cycle)][| ]]  Notes         :: *[Current-Info:]*  Status, Notes (Tasks/Todo Lists, etc.) [[elisp:(org-cycle)][| ]]
_CommentEnd_

function vis_moduleDescription {  cat  << _EOF_
*  [[elisp:(org-cycle)][| ]]  Xrefs         :: *[Related/Xrefs:]*  <<Xref-Here->>  -- External Documents  [[elisp:(org-cycle)][| ]]
**  [[elisp:(org-cycle)][| ]]  Panel        :: [[file:/libre/ByStar/InitialTemplates/activeDocs/bxServices/versionControl/fullUsagePanel-en.org::Xref-VersionControl][Panel Roadmap Documentation]] [[elisp:(org-cycle)][| ]]
*  [[elisp:(org-cycle)][| ]]  Info          :: *[Module Description:]* [[elisp:(org-cycle)][| ]]

_EOF_
}


_CommentBegin_
*  [[elisp:(org-cycle)][| ]]  Examples      :: Examples [[elisp:(org-cycle)][| ]]
_CommentEnd_


function vis_fileUpdateExamples {
    typeset extraInfo="-h -v -n showRun"
    #typeset extraInfo=""
    typeset runInfo="-p ri=lsipusr:passive"

    typeset examplesInfo="${extraInfo} ${runInfo}"

    visLibExamplesOutput ${G_myName} 
  cat  << _EOF_
$( examplesSeperatorTopLabel "${G_myName}" )
$( examplesSeperatorChapter "chemacs2 ~/.emacs-profiles.el" )
${G_myName} ${extraInfo} -i emacsProfilesStdout
${G_myName} ${extraInfo} -p emacs=29 -i emacsProfilesStdout
${G_myName} ${extraInfo} -i emacsProfilesUpdate
${G_myName} ${extraInfo} -p emacs=29 -i emacsProfilesUpdate
${G_myName} ${extraInfo} -f -i emacsProfilesUpdate
${G_myName} ${extraInfo} -p emacs=29 -f -i emacsProfilesUpdate
${G_myName} ${extraInfo} -i emacsProfilesVerify
${G_myName} ${extraInfo} -p emacs=29 -i emacsProfilesVerify
ls -l $( vis_emacsProfilesFile  )
_EOF_
}

function vis_updateFileWithStdoutFunc {
    G_funcEntry
    function describeF {  G_funcEntryShow; cat  << _EOF_
** \$1 is updateStdoutFunc and \$2 is updateFileName. updateFileWithStdoutFunc is subject to force-mode.
_EOF_
    }
    EH_assert [[ $# -eq 2 ]]

    local updateStdoutFunc=$1
    local updateFileName=$2

    typeset dirsPart=$( FN_dirsPart ${updateFileName} )
    #opDoExit  FN_dirCreatePathIfNotThere ${dirsPart}

    if [[ "${G_forceMode}" == "force" ]] ; then
        FN_fileSafeKeep ${updateFileName}
        ${updateStdoutFunc} > ${updateFileName} # 2> /dev/null
    else
        if [ -f ${updateFileName} ] ; then
            ANT_raw "File: ${updateFileName} exists -- no action taken"
        else
            FN_fileSafeKeep ${updateFileName}
            ${updateStdoutFunc} > ${updateFileName} # 2> /dev/null
        fi
    fi

    # opDoComplain chmod ugo+x ${updateFileName}
    opDoComplain ls -l ${updateFileName}
}

function vis_verifyFileWithStdoutFunc {
    G_funcEntry
    function describeF {  G_funcEntryShow; cat  << _EOF_
** \$1 is updateFileName and \$2 is updateStdoutFunc. Verify file with stdout function.
_EOF_
    }
    EH_assert [[ $# -eq 2 ]]

    local updateStdoutFunc=$1
    local updateFileName=$2
    local outcome=0

    local tmpFile=$( FN_tempFile )

    lpDo eval ${updateStdoutFunc}  \> ${tmpFile}

    lpDo FN_fileCmpAndDiff ${updateFileName} ${tmpFile}
    outcome=$?

    lpDo FN_fileRmIfThere ${tmpFile}
    lpReturn ${outcome}
}

function vis_emacsProfilesStdout {
    G_funcEntry
    function describeF {  G_funcEntryShow; cat  << _EOF_
** Example of stdout
_EOF_
    }
    EH_assert [[ $# -eq 0 ]]

  cat  << _EOF_
;;;
;;; Machine Generated By ${G_myFullName}::${G_thisFunc} on $( DATE_nowTag )
;;;

_EOF_

}

function vis_emacsProfilesUpdate {
  local updateFileName=$( vis_emacsProfilesFile  )
  local updateStdoutFunc=vis_emacsProfilesStdout

  lpDo vis_updateFileWithStdoutFunc ${updateStdoutFunc} ${updateFileName}
}

function vis_emacsProfilesVerify {
  local updateFileName=$( vis_emacsProfilesFile  )
  local updateStdoutFunc=vis_emacsProfilesStdout

  lpDo vis_verifyFileWithStdoutFunc  ${updateStdoutFunc} ${updateFileName}
}


_CommentBegin_
*  [[elisp:(beginning-of-buffer)][Top]] ################ [[elisp:(delete-other-windows)][(1)]]  *End Of Editable Text*
_CommentEnd_

####+BEGIN: bx:dblock:bash:end-of-file :type "basic"
_CommentBegin_
*  [[elisp:(org-cycle)][| ]]  Common        ::  /[dblock] -- End-Of-File Controls/ [[elisp:(org-cycle)][| ]]
_CommentEnd_
#+STARTUP: showall
#local variables:
#major-mode: sh-mode
#fill-column: 90
# end:
####+END:
