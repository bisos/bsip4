#!/usr/bin/env bash


IcmBriefDescription="NOTYET: Short Description Of The Module"

ORIGIN="
* Revision And Libre-Halaal CopyLeft -- Part Of ByStar -- Best Used With Blee
"

####+BEGIN: bx:bash:top-of-file :vc "cvs" partof: "bystar" :copyleft "halaal+brief"

####+END:

__author__="
* Authors: Mohsen BANAN, http://mohsen.banan.1.byname.net/contact
"


####+BEGIN: bx:bsip:bash:seed-spec :types "seedActions.bash"
SEED="
*  /[dblock]/ /Seed/ :: [[file:/bisos/core/bsip/bin/seedActions.bash]] | 
"
FILE="
*  /This File/ :: /bisos/core/bsip/bin/blee 
"
if [ "${loadFiles}" == "" ] ; then
    /bisos/core/bsip/bin/seedActions.bash -l $0 "$@" 
    exit $?
fi
####+END:

# set -u            # unset vars are an error
# #set -e            # exit if pipeline fails  
# set -o pipefail   # return is that of rightmost
# IFS=$'\n\t'      #


_CommentBegin_
####+BEGIN: bx:dblock:global:file-insert-cond :cond "./blee.el" :file "/libre/ByStar/InitialTemplates/software/plusOrg/dblock/inserts/topControls.org"
*  /Controls/ ::  [[elisp:(org-cycle)][| ]]  [[elisp:(show-all)][Show-All]]  [[elisp:(org-shifttab)][Overview]]  [[elisp:(progn (org-shifttab) (org-content))][Content]] | [[file:Panel.org][Panel]] | [[elisp:(blee:ppmm:org-mode-toggle)][Nat]] | [[elisp:(bx:org:run-me)][Run]] | [[elisp:(bx:org:run-me-eml)][RunEml]] | [[elisp:(delete-other-windows)][(1)]] | [[elisp:(progn (save-buffer) (kill-buffer))][S&Q]]  [[elisp:(save-buffer)][Save]]  [[elisp:(kill-buffer)][Quit]] [[elisp:(org-cycle)][| ]]
** /Version Control/ ::  [[elisp:(call-interactively (quote cvs-update))][cvs-update]]  [[elisp:(vc-update)][vc-update]] | [[elisp:(bx:org:agenda:this-file-otherWin)][Agenda-List]]  [[elisp:(bx:org:todo:this-file-otherWin)][ToDo-List]]
####+END:
_CommentEnd_

_CommentBegin_
*      ================
*  [[elisp:(beginning-of-buffer)][Top]] ################ [[elisp:(delete-other-windows)][(1)]] CONTENTS-LIST ################
*  [[elisp:(org-cycle)][| ]]  Notes         :: *[Current-Info:]*  Status, Notes (Tasks/Todo Lists, etc.) [[elisp:(org-cycle)][| ]]
_CommentEnd_

function vis_moduleDescription {  cat  << _EOF_
*  [[elisp:(org-cycle)][| ]]  Xrefs         :: *[Related/Xrefs:]*  <<Xref-Here->>  -- External Documents  [[elisp:(org-cycle)][| ]]
**  [[elisp:(org-cycle)][| ]]  Panel        :: [[file:/libre/ByStar/InitialTemplates/activeDocs/bxServices/versionControl/fullUsagePanel-en.org::Xref-VersionControl][Panel Roadmap Documentation]] [[elisp:(org-cycle)][| ]]
*  [[elisp:(org-cycle)][| ]]  Info          :: *[Module Description:]* [[elisp:(org-cycle)][| ]]

_EOF_
}

_CommentBegin_
*  [[elisp:(beginning-of-buffer)][Top]] ################ [[elisp:(delete-other-windows)][(1)]]  *Seed Extensions*
_CommentEnd_

_CommentBegin_
*  [[elisp:(org-cycle)][| ]]  Imports       :: Prefaces (Imports/Libraries) [[elisp:(org-cycle)][| ]]
_CommentEnd_

. ${opBinBase}/opAcctLib.sh
. ${opBinBase}/opDoAtAsLib.sh
. ${opBinBase}/lpParams.libSh
. ${opBinBase}/lpReRunAs.libSh

. ${opBinBase}/bleeLib.sh

# PRE parameters

baseDir=""
acctName=""
emacs="0"
backupP="t"  ## blank is false
bleeName="blee3"

function G_postParamHook {
     return 0
}


_CommentBegin_
*  [[elisp:(org-cycle)][| ]]  Examples      :: Examples [[elisp:(org-cycle)][| ]]
_CommentEnd_


function vis_examples {
    typeset extraInfo="-h -v -n showRun"
    #typeset extraInfo=""
    typeset runInfo="-p ri=lsipusr:passive"

    typeset examplesInfo="${extraInfo} ${runInfo}"

    visLibExamplesOutput ${G_myName} 
  cat  << _EOF_
$( examplesSeperatorTopLabel "${G_myName}" )
$( examplesSeperatorChapter "chemacs2 ~/.emacs-profiles.el" )
${G_myName} ${extraInfo} -i emacsProfilesStdout
${G_myName} ${extraInfo} -p emacs=29 -i emacsProfilesStdout
${G_myName} ${extraInfo} -i emacsProfilesUpdate
${G_myName} ${extraInfo} -p emacs=29 -i emacsProfilesUpdate
${G_myName} ${extraInfo} -f -i emacsProfilesUpdate
${G_myName} ${extraInfo} -p emacs=29 -f -i emacsProfilesUpdate
${G_myName} ${extraInfo} -i emacsProfilesVerify
${G_myName} ${extraInfo} -p emacs=29 -i emacsProfilesVerify
ls -l $( vis_emacsProfilesFile  )
$( examplesSeperatorChapter "chemacs2 Setup" )
${G_myName} ${extraInfo} -i chemacs2FullUpdate # dotEmacsDeactivate+dotEmacsDirForChemacs2+emacsProfilesUpdate
${G_myName} ${extraInfo} -i dotEmacsDeactivate
${G_myName} ${extraInfo} -i dotEmacsDirForChemacs2
$( examplesSeperatorChapter "Emacs Profiles List/Run" )
${G_myName} ${extraInfo} -i chemacs2ProfilesNamesList
${G_myName} ${extraInfo} -i chemacs2ProfilesNamesCache # $(vis_chemacs2ProfilesNamesCache)
${G_myName} ${extraInfo} -i run blee1
${G_myName} ${extraInfo} -i run doom
${G_myName} ${extraInfo} -i getEmacsVer 0
${G_myName} ${extraInfo} -i getEmacsVer 28
${G_myName} ${extraInfo} -p emacs=0 -i run blee2
${G_myName} ${extraInfo} -p emacs=28 -i run blee2
${G_myName} ${extraInfo} -i run blee2
${G_myName} ${extraInfo} -p emacs=sys -i run blee3
${G_myName} ${extraInfo} -i run blee3
${G_myName} ${extraInfo} -p emacs=28 -i run doom-blee3
$( examplesSeperatorChapter "Pure Blee DeStraight --- Delete All elcs and cloned repos" )
${G_myName} ${extraInfo} -p emacs=0 -i deStraight blee2
${G_myName} ${extraInfo} -p emacs=28.1 -i deStraight blee2
${G_myName} ${extraInfo} -p emacs=28.1 -i deStraight blee3
$( examplesSeperatorChapter "Blee Provisioing Setup" )
${G_myName} ${extraInfo} -i blee1InitSetup
${G_myName} ${extraInfo} -p acctName=bystar -i provisionSetup # runs prepUpdateInit
${G_myName} ${extraInfo} -i prepUpdateInit 27f
${G_myName} ${extraInfo} -i prepUpdateInit 24f
diff ~/.emacs.d/init.el /bisos/blee/env/init/dotEmacs_dInit
$( examplesSeperatorChapter "Development And Libraries And History" )
$( vis_examples_bleeLibLine )
${G_myName} ${extraInfo} -p acctName=bystar -i provisionSetup
bleeDoomsManage.sh ${extraInfo} -p profile=blee2 -i reBuild    # doomReBuildBlee2
_EOF_
}

noArgsHook() {
  vis_examples
}

_CommentBegin_
*  [[elisp:(org-cycle)][| ]]  IIFs          :: Interactively Invokable Functions (IIF)s |  [[elisp:(org-cycle)][| ]]
_CommentEnd_


function vis_updateFileWithStdoutFunc {
    G_funcEntry
    function describeF {  G_funcEntryShow; cat  << _EOF_
** \$1 is updateStdoutFunc and \$2 is updateFileName. updateFileWithStdoutFunc is subject to force-mode.
_EOF_
    }
    EH_assert [[ $# -eq 2 ]]

    local updateStdoutFunc=$1
    local updateFileName=$2

    typeset dirsPart=$( FN_dirsPart ${updateFileName} )
    #opDoExit  FN_dirCreatePathIfNotThere ${dirsPart}

    if [[ "${G_forceMode}" == "force" ]] ; then
        if [ -n "${backupP}" ] ; then
            FN_fileSafeKeep ${updateFileName}
        fi
        ${updateStdoutFunc} > ${updateFileName} # 2> /dev/null
    else
        if [ -f ${updateFileName} ] ; then
            ANT_raw "File: ${updateFileName} exists -- no action taken"
        else
            if [ -n "${backupP}" ] ; then
                FN_fileSafeKeep ${updateFileName}
            fi
            ${updateStdoutFunc} > ${updateFileName} # 2> /dev/null
        fi
    fi

    # opDoComplain chmod ugo+x ${updateFileName}
    if [ -n "${backupP}" ] ; then
        opDoComplain ls -l ${updateFileName}
    fi
}

function vis_verifyFileWithStdoutFunc {
    G_funcEntry
    function describeF {  G_funcEntryShow; cat  << _EOF_
** \$1 is updateFileName and \$2 is updateStdoutFunc. Verify file with stdout function.
_EOF_
    }
    EH_assert [[ $# -eq 2 ]]

    local updateStdoutFunc=$1
    local updateFileName=$2
    local outcome=0

    local tmpFile=$( FN_tempFile )

    lpDo eval ${updateStdoutFunc}  \> ${tmpFile}

    lpDo FN_fileCmpAndDiff ${updateFileName} ${tmpFile}
    outcome=$?

    lpDo FN_fileRmIfThere ${tmpFile}
    lpReturn ${outcome}
}

function vis_emacsProfilesStdout {
    G_funcEntry    
    local emacsVer=$(vis_getEmacsVer ${emacs})
    if [ -z "${emacsVer}" ] ; then
        EH_problem "Bad emacsVer=${emacsVer}"
        lpReturn 1
    fi

  cat  << _EOF_
;;;
;;; Machine Generated By ${G_myFullName}::${G_thisFunc} on $( DATE_nowTag )
;;;
(
 ("default" . ((user-emacs-directory . "/bisos/blee/blee-1-init")))       ;; Same as blee1
 ("blee1" . ((user-emacs-directory . "/bisos/blee/blee-1-init")))         ;; Not based on doom
 ("doom" . ((user-emacs-directory . "/bisos/blee/${emacsVer}/doom-main-emacs") ;; Minimal doom for comparison
           (env . (("DOOMDIR" . "/bisos/blee/doom-base")))))
 ("blee2Old" . ((user-emacs-directory . "/bisos/blee/28f/doom-main-blee2")    ;; blee2 on top of doom
           (env . (("DOOMDIR" . "/bisos/blee/doom-blee-base")))))
 ("doom-blee2" . ((user-emacs-directory . "/bisos/blee/emacsVers/${emacsVer}/doom-main-blee2")    ;; blee2 on top of doom
           (env . (("DOOMDIR" . "/bisos/blee/emacsVers/${emacsVer}/doom-main-blee2")))))
 ("blee3" . ((user-emacs-directory . "/bisos/blee/env3/boot")))         ;; Not based on doom
 ("doom-blee3" . ((user-emacs-directory . "/bisos/blee/emacsVers/${emacsVer}/doom-main-blee3")    ;; blee3 on top of doom
           (env . (("DOOMDIR" . "/bisos/blee/dooms/doom-base-blee3")))))
 )

_EOF_

##  ("doomDist" . ((user-emacs-directory . "~/doom-emacs")))                 ;; In homeDir using ~/.doom.d

}

function vis_emacsProfilesFile {
  local updateFileName=$( echo ~/.emacs-profiles.el )
  echo ${updateFileName}
}

function vis_emacsProfilesUpdate {
  local updateFileName=$( vis_emacsProfilesFile  )
  local updateStdoutFunc=vis_emacsProfilesStdout

  lpDo vis_updateFileWithStdoutFunc ${updateStdoutFunc} ${updateFileName}
}

function vis_emacsProfilesVerify {
  local updateFileName=$( vis_emacsProfilesFile  )
  local updateStdoutFunc=vis_emacsProfilesStdout

  lpDo vis_verifyFileWithStdoutFunc  ${updateStdoutFunc} ${updateFileName}
}

function vis_dotEmacsDeactivate {
    G_funcEntry
    function describeF {  G_funcEntryShow; cat  << _EOF_
** Get it out of the way. Save it.
_EOF_
    }
    EH_assert [[ $# -eq 0 ]]

    local subjectFile=$( FN_absolutePathGet ~/.emacs )
    if [ -f "${subjectFile}" ] ; then
        lpDo FN_fileSafeKeep ${subjectFile}
    else
        ANT_raw "Safekeeping of ${subjectFile} skipped."
    fi
}


function vis_dotEmacsDirForChemacs2 {
    G_funcEntry
    function describeF {  G_funcEntryShow; cat  << _EOF_
** Safekeep .emacs.d. Gitclone chemacs2 in .emacs.d.
_EOF_
    }
    EH_assert [[ $# -eq 0 ]]

    local home=$( FN_absolutePathGet ~ )
    local subjectDir=$( FN_absolutePathGet ~/.emacs.d )
    if [ -d "${subjectDir}" ] ; then
        lpDo FN_dirSafeKeep ${subjectDir}
    else
        ANT_raw "Safekeeping of ${subjectDir} skipped."
    fi

    inBaseDirDo ${home} git clone https://github.com/plexus/chemacs2.git ${subjectDir}
}

function vis_chemacs2FullUpdate {
    G_funcEntry
    function describeF {  G_funcEntryShow; cat  << _EOF_
** Safekeep .emacs.d. Gitclone chemacs2 in .emacs.d.
_EOF_
    }
    EH_assert [[ $# -eq 0 ]]

    lpDo vis_dotEmacsDeactivate
    lpDo vis_dotEmacsDirForChemacs2
    lpDo vis_emacsProfilesUpdate
}

# NOTYET, should become a dblock based on vis_chemacs2ProfilesNamesList
####+BEGIN-NOT: bx:shList/chemacsProfilesNames :noParams ""
chemacsProfilesNamesCache=(
default
blee1
doom
blee2
blee3
doomblee3
)

####+END:

function vis_chemacs2ProfilesNamesCache {
    G_funcEntry
    function describeF {  G_funcEntryShow; cat  << _EOF_
** List existing chemacs profiles.
_EOF_
    }
    EH_assert [[ $# -eq 0 ]]

    echo ${chemacsProfilesNamesCache[@]}

    lpReturn
}

function vis_chemacs2ProfilesNamesList {
    G_funcEntry
    function describeF {  G_funcEntryShow; cat  << _EOF_
** From ~/.emacs-profiles.el, read the profiles names as a list.
_EOF_
    }
    EH_assert [[ $# -eq 0 ]]

    local tmpFile=$( FN_tempFile )
    lpDo touch ${tmpFile}

    lpDo bleeCommonAction.sh -i chemacsProfilesNames ${tmpFile} > /dev/null

    lpDo cat ${tmpFile}

    lpDo rm ${tmpFile}
}

function vis_run {
    G_funcEntry
    function describeF {  G_funcEntryShow; cat  << _EOF_
** run ICM expects one or more chemacs2 profile names.
Valid profile names are:
$(vis_chemacs2ProfilesNamesCache)
_EOF_
    }
    if [ $# -eq 0  ] ; then
        ANT_raw "Usage: No arguments were specified."
        lpDo describeF
    fi

    local emacsExec=$(vis_getEmacsExec ${emacs})

    if [ -z "${emacsExec}" ] ; then
        EH_problem "Bad emacsExec=${emacsExec} emacs=${emacs}"
        lpReturn 1
    fi

    G_forceMode="force"
    backupP=""
    lpDo vis_emacsProfilesUpdate

    for each in $@ ; do
        # echo $PATH
        #lpDo ${emacsExec} --with-profile ${each} --debug-init  &
	lpDo ${emacsExec} --with-profile ${each} &	
    done
}


function vis_deStraight {
    G_funcEntry
    function describeF {  G_funcEntryShow; cat  << _EOF_
** Move base of blee-straight out of the way. As if we are starting with a virgin blee.
_EOF_
    }
    if [ $# -eq 0  ] ; then
        ANT_raw "Usage: No arguments were specified."
        lpDo describeF
    fi

    local emacsVer=${emacs}
    if [ -z "${emacsVer}" ] ; then
        EH_problem "Bad emacsVer=${emacsVer}"
        lpReturn 1
    fi

    local emacsVerBaseDir="/bisos/blee/emacsVers/${emacsVer}"

    if [ ! -d "${emacsVerBaseDir}" ] ; then
        EH_problem "Missing ${emacsVerBaseDir}"
        lpReturn 101
    fi

    local bleeBaseDir=""

    for each in $@ ; do
        bleeBaseDir="${emacsVerBaseDir}/${each}"
        if [ ! -d "${bleeBaseDir}" ] ; then
            EH_problem "Missing ${bleeBaseDir} --- skipped"
            continue
        fi
        # NOTYET, if not force mode get user's confirmation
        lpDo /bin/rm -r -f "${bleeBaseDir}"
    done
}



function vis_blee1InitSetup {
    G_funcEntry
    function describeF {  G_funcEntryShow; cat  << _EOF_
** Setup /bisos/blee/blee-1-init
_EOF_
                       }
    EH_assert [[ $# -eq 0 ]]

    local templatesBaseDir="/bisos/blee/env/init/"

    if [ ! -d "${templatesBaseDir}" ] ; then
        EH-problem "Missing ${templatesBaseDir}"
        return 1
    fi

    lpDo FN_dirCreatePathIfNotThere /bisos/blee/blee-1-init

    local blee1InitFile=/bisos/blee/blee-1-init/init.el

    if [ -f "${blee1InitFile}" ] ; then
        opDo FN_fileSafeMove  "${blee1InitFile}" "${blee1InitFile}-$(DATE_nowTag)"
    fi
    opDo cp "${templatesBaseDir}/dotEmacs_dInit" "${blee1InitFile}"
}



function vis_provisionSetup {
    G_funcEntry
    function describeF {  G_funcEntryShow; cat  << _EOF_
In acctName's (mandtaory) HOME, with vis_prepUpdateInit create emacs init files.
Typically called as:
lpDo sudo -u bystar \${bisosBinBase}/blee -v -n showRun -p acctName=bystar -i provisionSetup
_EOF_
    }
    EH_assert [[ $# -eq 0 ]]

    if [ -z "${acctName}" ] ; then
        EH_problem "Missing acctName"
        lpReturn 101
    fi

    # NOTYET, verify that acctName is valid (source needed lib)

    # Has already been done, will not repeat
    #lpDo ${opBinBase}/bisosPyVenvSetup.sh -h -v -n showRun -i venvPy3_pipInstalls

    # sha1 obtained from a stable release -- git rev-parse HEAD
    inBaseDirDo /bisos/blee/extPkgs/emacs-application-framework git reset --hard 4ce9b1cab0f4894adcb1710917f96279cccd401b

    # NOTYET, for DEBIAN-12.  Should check version here.
    lpDo sudo -u ${acctName} ${opBinBase}/bleeDoomsManage.sh -h -v -n showRun -p emacs=sys -p profile=blee3 -i reBuild
    # lpDo bleeDoomsManage.sh -h -v -n showRun -p profile=sysDoom -i reBuild

    lpDo vis_blee1InitSetup

    lpDo vis_chemacs2FullUpdate

    lpDo sudo -u ${acctName} ${opBinBase}/bueMailManage.sh -h -v -n showRun -i mhonarcBasePrep
}


function vis_prepUpdateInit {
    G_funcEntry
    function describeF {  G_funcEntryShow; cat  << _EOF_
** Starting point tempaltes are in: /bisos/blee/env/init/
_EOF_
    }
    EH_assert [[ $# -eq 1 ]]

    local emacsVer="$1"

    local runTimeAcctName=$( id -u -n )
    local HOME=$( eval echo ~${runTimeAcctName} )

    local templatesBaseDir="/bisos/blee/env/init/"
    
    if [ ! -d "${templatesBaseDir}" ] ; then
        EH-problem "Missing ${templatesBaseDir}"
        return 1
    fi

    local dotEmacs=$( FN_absolutePathGet "${HOME}/.emacs" )
    local dotEmacsEl=$( FN_absolutePathGet "${HOME}/.emacs.el" )   

    if [ -f "${dotEmacs}" ] ; then
        opDo FN_fileSafeMove  "${dotEmacs}" "${dotEmacs}-$(DATE_nowTag)"
    else
            ANT_raw "No ${dotEmacs} -- elimination skipped"
    fi

    if [ -f "${dotEmacsEl}" ] ; then
        opDo FN_fileSafeMove  "${dotEmacsEl}" "${dotEmacsEl}-$(DATE_nowTag)"
    else
            ANT_raw "No ${dotEmacsEl} -- elimination skipped"
    fi

    local dotEmacs_dBase=$( FN_absolutePathGet "${HOME}/.emacs.d" )

    if [ -d "${dotEmacs_dBase}" ] ; then
        ANT_raw "${dotEmacs_dBase} directory exists -- creation skipped"
    else
        lpDo mkdir "${dotEmacs_dBase}"
    fi

    local dotEmacs_dInit=$( FN_absolutePathGet "${HOME}/.emacs.d/init.el" )
    local dotEmacs_dEarly=$( FN_absolutePathGet "${HOME}/.emacs.d/early-init.el" )    

    if [ -f "${dotEmacs_dInit}" ] ; then
        opDo FN_fileSafeMove  "${dotEmacs_dInit}" "${dotEmacs_dInit}-$(DATE_nowTag)"
    fi

    opDo cp "${templatesBaseDir}/dotEmacs_dInit" "${dotEmacs_dInit}"

    
    local dotConfig_emacs_init=""
    if [ -d "~/.config/emacs" ] ; then
        dotConfig_emacs_init=$( FN_absolutePathGet "~/.config/emacs/init")
    fi
    
    case ${emacsVer} in
        "25f" | "26f")
            doNothing
            ;;
        
        "27f")
            if [ -f "${dotConfig_emacs_init}" ] ; then
                opDo FN_fileSafeMove  "${dotConfig_emacs_init}" "${dotConfig_emacs_init}-$(DATE_nowTag)"
            fi
            # if ${dotConfig_emacs_init} exists, it gets used, but we want ${dotEmacs_dInit} instead -- so it should be deactivated

            if [ -f "${dotEmacs_dEarly}" ] ; then
                opDo FN_fileSafeMove  "${dotEmacs_dEarly}" "${dotEmacs_dEarly}-$(DATE_nowTag)"
            fi

            opDo cp "${templatesBaseDir}/early-init.el" "${dotEmacs_dEarly}"
            
            ;;
        *)
            EH_problem "Unsupported ${emacsVer}"
            ;;
    esac

    lpReturn
}




_CommentBegin_
*  [[elisp:(beginning-of-buffer)][Top]] ################ [[elisp:(delete-other-windows)][(1)]]  *End Of Editable Text*
_CommentEnd_

####+BEGIN: bx:dblock:bash:end-of-file :type "basic"
_CommentBegin_
*  [[elisp:(org-cycle)][| ]]  Common        ::  /[dblock] -- End-Of-File Controls/ [[elisp:(org-cycle)][| ]]
_CommentEnd_
#+STARTUP: showall
#local variables:
#major-mode: sh-mode
#fill-column: 90
# end:
####+END:
