#!/bin/bash

####+BEGIN: bx:dblock:bash:top-of-file :vc "cvs" :partof "bystar" :copyleft "halaal+brief"
# {{{ DBLOCK-top-of-file
typeset RcsId="$Id: bystarMailing.libSh,v 1.2 2018-03-06 06:26:15 lsipusr Exp $"
#  This is part of ByStar Libre Services. http://www.by-star.net
# Copyright (c) 2011 Neda Communications, Inc. -- http://www.neda.com
# See PLPC-120001 for restrictions.
# This is a Halaal Poly-Existential intended to remain perpetually Halaal. 
# }}} DBLOCK-top-of-file
####+END:

# {{{ Describe

function vis_describeLocal {
    cat  << _EOF_
Mailing Object (mo)Definitions 

_EOF_
}

# }}}

bbdbNamesBase="/usr/devenv/bbdbNames"
namesBaseDir="${bbdbNamesBase}/Names"
bbdbNamesBinBase="${bbdbNamesBase}/bin"
bbdbNamesLibBase="${bbdbNamesBase}/lib"
logsBaseDir="${bbdbNamesBase}/Logs"
templatesBaseDir="${bbdbNamesBase}/Templates"
distBaseDir="${bbdbNamesBase}/DistGened"
distKeepBaseDir="${bbdbNamesBase}/DistKeep"
mailingsBaseDir="${bbdbNamesBase}/MailingsGened"
mailingsKeepBaseDir="${bbdbNamesBase}/MailingsKeep"

msendLogsFile=${logsBaseDir}/bbdb-msend.sent


# {{{ Mailing Object (mo)Definitions 

typeset    moObjectTypeFileName="objectType"
typeset -A moObjectTypeEnum=(
    [nativeNode]=nativeNode 
    [auxNode]=auxNode 
    [auxLeaf]=auxLeaf
    [basic]=basic
    [text]=text 
    [html]=html 
    [htmlLcnt]=htmlLcnt
    [lcntHtml]=lcntHtml
    [htmlPubLcnt]=htmlPubLcnt
    [custom]=custom
)

# Mailing Object File Parameters

typeset    moExcludeFromAutoloadFileName="excludeFromAutoload"
typeset -A moExcludeFromAutoloadEnum=(
    [true]=true 
    [false]=false 
    [default]=true
)

typeset    moMailingNameFileName="mailingName"
typeset -A moMailingNameEnum=(
    [path]=path
)

typeset    moContentMailFileName="content.mail"
typeset -A moContentMailEnum=(
    [default]=default
)


# }}}


function vis_inPloneBaseDirAccordinglyDo {
    G_funcEntry
    function describeF {  G_funcEntryShow; cat  << _EOF_
Arg-1 =${baseDir} is a baseDirectory.
Arg-2 and REST =${doCommand} are the command to do. 
Go through the following order:
  If baseDirectory exists, we go there and ${doCommand}.
  Else-If baseDirectory.gened exists, we go there and ${doCommand}.
  Else-If baseDirectory.common exists, we go there and ${doCommand}.
  Else we report a problem.
_EOF_
    }
    EH_assert [[ $# -ge 2 ]]

    typeset baseDir=$1

    shift

    typeset doCommand=$@

    if [ -d ${baseDir} ] ;  then
	pushd ${baseDir} > /dev/null 
	ANV_cooked "In $( pwd ) Running: ${doCommand}"
	${doCommand}
	popd > /dev/null
    elif [ -d ${baseDir}.gened ] ;  then
	pushd ${baseDir}.gened > /dev/null 
	ANV_cooked "In $( pwd ) Running: ${doCommand}"
	${doCommand}
	popd > /dev/null 
    elif [ -d ${baseDir}.common ] ;  then
	pushd ${baseDir}.common > /dev/null 
	ANV_cooked "In $( pwd ) Running: ${doCommand}"
	${doCommand}
	popd > /dev/null 
    else
	EH_problem "Missing ${baseDir} or .gened or .common -- Skipped ${doCommand}"
	lpReturn 101
    fi

    lpReturn
}


function vis_genedToStartingBase {
    G_funcEntry
    function describeF {  G_funcEntryShow; cat  << _EOF_
_EOF_
    }
    EH_assert [[ $# -eq 1 ]]

    thisDir="$1"
    typeset thisPrefix=$( FN_prefix "${thisDir}" )
    typeset thisExtension=$( FN_extension "${thisDir}" )

    case ${thisExtension} in 
	"gened"|"common")   
	    opDo doNothing
	    ;;
	*)
	    EH_problem "Unknown Extension ${thisPrefix}.${thisExtension}"
	    ;;
    esac

    if [ ! -d "${thisDir}" ] ; then
	EH_problem "Missing ${thisDir} -- Skipped"
	lpReturn 101
    fi

    if [ -d "${thisPrefix}" ] ; then
	EH_problem "${thisPrefix} Already Exists -- Skipped"
	lpReturn 101
    fi

    if [ -h "${thisDir}" ] ; then
	opDo cp -H -r "${thisDir}" "${thisPrefix}"
    else
	opDo mv "${thisDir}" "${thisPrefix}"
    fi

    inBaseDirDo "${thisPrefix}" lcaCvsAdmin.sh -h -v -n showRun -i allRecurseDeCvs

    lpReturn
}



####+BEGIN: bx:dblock:bash:end-of-file :type "basic"
# {{{ DBLOCK-end-of-file
#local variables:
#major-mode: shellscript-mode
#fill-column: 90
# end:
# }}} DBLOCK-end-of-file
####+END:

