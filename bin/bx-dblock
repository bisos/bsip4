#!/bin/bash

IcmBriefDescription="NOTYET: Short Description Of The Module"

ORIGIN="
* Revision And Libre-Halaal CopyLeft -- Part Of ByStar -- Best Used With Blee
"

####+BEGIN: bx:bash:top-of-file :vc "cvs" partof: "bystar" :copyleft "halaal+brief"
typeset RcsId="$Id: bx-dblock,v 1.6 2020-08-23 18:21:24 lsipusr Exp $"
# *CopyLeft*
# Copyright (c) 2011 Neda Communications, Inc. -- http://www.neda.com
# See PLPC-120001 for restrictions.
# This is a Halaal Poly-Existential intended to remain perpetually Halaal.
####+END:

__author__="
* Authors: Mohsen BANAN, http://mohsen.banan.1.byname.net/contact
"

####+BEGIN: bx:bsip:bash:seed-spec :types "seedActions.bash"
SEED="
*  /[dblock]/ /Seed/ :: [[file:/bisos/core/bsip/bin/seedActions.bash]] | 
"
FILE="
*  /This File/ :: /bisos/core/bsip/bin/bx-dblock 
"
if [ "${loadFiles}" == "" ] ; then
    /bisos/core/bsip/bin/seedActions.bash -l $0 "$@" 
    exit $?
fi
####+END:

_CommentBegin_
####+BEGIN: bx:dblock:global:file-insert-cond :cond "./blee.el" :file "/libre/ByStar/InitialTemplates/software/plusOrg/dblock/inserts/topControls.org"
*      ================
*  /Controls/ ::  [[elisp:(org-cycle)][| ]]  [[elisp:(show-all)][Show-All]]  [[elisp:(org-shifttab)][Overview]]  [[elisp:(progn (org-shifttab) (org-content))][Content]] | [[file:Panel.org][Panel]] | [[elisp:(blee:ppmm:org-mode-toggle)][Nat]] | [[elisp:(bx:org:run-me)][Run]] | [[elisp:(bx:org:run-me-eml)][RunEml]] | [[elisp:(delete-other-windows)][(1)]] | [[elisp:(progn (save-buffer) (kill-buffer))][S&Q]]  [[elisp:(save-buffer)][Save]]  [[elisp:(kill-buffer)][Quit]] [[elisp:(org-cycle)][| ]]
** /Version Control/ ::  [[elisp:(call-interactively (quote cvs-update))][cvs-update]]  [[elisp:(vc-update)][vc-update]] | [[elisp:(bx:org:agenda:this-file-otherWin)][Agenda-List]]  [[elisp:(bx:org:todo:this-file-otherWin)][ToDo-List]] 
####+END:
_CommentEnd_

_CommentBegin_
*      ================
*  [[elisp:(beginning-of-buffer)][Top]] ################ [[elisp:(delete-other-windows)][(1)]] CONTENTS-LIST ################
*  [[elisp:(org-cycle)][| ]]  Notes         :: *[Current-Info:]*  Status, Notes (Tasks/Todo Lists, etc.) [[elisp:(org-cycle)][| ]]
_CommentEnd_

function vis_moduleDescription {  cat  << _EOF_
*  [[elisp:(org-cycle)][| ]]  Xrefs         :: *[Related/Xrefs:]*  <<Xref-Here->>  -- External Documents  [[elisp:(org-cycle)][| ]]
**  [[elisp:(org-cycle)][| ]]  Panel        :: [[file:/libre/ByStar/InitialTemplates/activeDocs/bxServices/versionControl/fullUsagePanel-en.org::Xref-VersionControl][Panel Roadmap Documentation]] [[elisp:(org-cycle)][| ]]
*  [[elisp:(org-cycle)][| ]]  Info          :: *[Module Description:]* [[elisp:(org-cycle)][| ]]

_EOF_
}

_CommentBegin_
*  [[elisp:(beginning-of-buffer)][Top]] ################ [[elisp:(delete-other-windows)][(1)]]  *Seed Extensions*
_CommentEnd_

_CommentBegin_
*  [[elisp:(org-cycle)][| ]]  Imports       :: Prefaces (Imports/Libraries) [[elisp:(org-cycle)][| ]]
_CommentEnd_

. ${opBinBase}/opAcctLib.sh
. ${opBinBase}/opDoAtAsLib.sh
. ${opBinBase}/lpParams.libSh
. ${opBinBase}/lpReRunAs.libSh

. ${opBinBase}/distHook.libSh

. ${opBinBase}/bleeLib.sh

# PRE parameters

baseDir=""

function G_postParamHook {
     return 0
}


_CommentBegin_
*  [[elisp:(org-cycle)][| ]]  Examples      :: Examples [[elisp:(org-cycle)][| ]]
_CommentEnd_


function vis_examples {
    typeset extraInfo="-h -v -n showRun"
    #typeset extraInfo=""
    typeset runInfo="-p ri=lsipusr:passive"
    local thisEmacsClient=$( vis_thisEmacsClient )
    local thisOne="NOTYET"

    typeset examplesInfo="${extraInfo} ${runInfo}"

    visLibExamplesOutput ${G_myName} 
  cat  << _EOF_
$( examplesSeperatorTopLabel "${G_myName}" )
$( examplesSeperatorChapter "ACTIONS: Update (Expand)" )
${G_myName} ${extraInfo} -i dblockDirsAll oneDirectory
${G_myName} ${extraInfo} -i dblockUpdateOneFileOrIgnore oneFile
${G_myName} ${extraInfo} -i dblockUpdateFiles file1 file2
find  . -type f -print | ${G_myName} ${extraInfo} -i dblockUpdateFiles
find -L . -type f -print | grep '/lcntProc.sh$' | ${G_myName} ${extraInfo} -i dblockUpdateFiles
$( examplesSeperatorChapter "ACTIONS: Blank (UnExpand)" )
${G_myName} ${extraInfo} -i dblockBlankFiles file1 file2
find  . -type f -print | ${G_myName} ${extraInfo} -i dblockBlankFiles
$( examplesSeperatorChapter "Verify" )
${G_myName} ${extraInfo} -i reUpdateDiffFiles file1 file2
${G_myName} ${extraInfo} -i diffBlankedFiles  file1 file2
$( examplesSeperatorChapter "Under Development" )
NOTYET  Add (org-dblock-bx-blank-then-update-file
#${thisEmacsClient} -e "(org-dblock-bx-blank-then-update-file \"${thisOne}\")"
$( examplesSeperatorChapter "Development And Libraries" )
$( vis_examples_bleeLibLine )
_EOF_
}

noArgsHook() {
    if [[ $# -eq 0 ]] ; then
        vis_examples
        return
    fi

    G_runMode="showRun"

    vis_dblockDirsAll $*         
}

_CommentBegin_
*  [[elisp:(org-cycle)][| ]]  IIFs          :: Interactively Invokable Functions (IIF)s |  [[elisp:(org-cycle)][| ]]
_CommentEnd_


_CommentBegin_
*  [[elisp:(org-cycle)][| ]]  [[elisp:(blee:ppmm:org-mode-toggle)][Nat]] [[elisp:(beginning-of-buffer)][Top]] [[elisp:(delete-other-windows)][(1)]] || IIF       ::  vis_dblockDirsAll    [[elisp:(org-cycle)][| ]]
_CommentEnd_

function vis_dblockDirsAll {
    EH_assert [[ $# -gt 0 ]]
  ANT_raw "$0:  $*"

  typeset filesList=$( find $1 -type f -print )

  vis_dblockUpdateFileOrIgnore ${filesList}
}

_CommentBegin_
*  [[elisp:(org-cycle)][| ]]  [[elisp:(blee:ppmm:org-mode-toggle)][Nat]] [[elisp:(beginning-of-buffer)][Top]] [[elisp:(delete-other-windows)][(1)]] || IIF       ::  vis_dblockUpdateFileOrIgnore    [[elisp:(org-cycle)][| ]]
_CommentEnd_

function vis_dblockUpdateFileOrIgnore {
    EH_assert [[ $# -gt 0 ]]

    typeset thisOne=""
    local thisEmacsClient=$( vis_thisEmacsClient )  

    
    for thisOne in ${*} ; do
        if [ ! -f "${thisOne}" ] ; then
            EH_problem "Missing ${thisOne} -- Skipped"
            continue
        fi

        if egrep '^.*\+BEGIN:' ${thisOne} > /dev/null ; then
            ANT_raw "${G_myName}: Dblock Updating ${thisOne}"
            opDo ${thisEmacsClient} -e "(org-dblock-update-file-bx \"${thisOne}\")"
        else
            ANT_raw "${G_myName}: Skipping ${thisOne}"
        fi
    done
}


_CommentBegin_
*  [[elisp:(org-cycle)][| ]]  [[elisp:(blee:ppmm:org-mode-toggle)][Nat]] [[elisp:(beginning-of-buffer)][Top]] [[elisp:(delete-other-windows)][(1)]] || IIF       ::  vis_reUpdateDiffFiles    [[elisp:(org-cycle)][| ]]
_CommentEnd_

function vis_reUpdateDiffFiles {
    function describeF {  cat  << _EOF_
If there are any args, process those.
If there are no args, process stdin.
_EOF_
                       }

    function processOne {
        EH_assert [[ $# -eq 1 ]]
        local thisOne="$1"

        if [ ! -f "${thisOne}" ] ; then
            EH_problem "Missing Input File ${thisOne}"
            lpReturn 101
        fi

        local thisSafeOne="${thisOne}-${dateTag}" 

        opDo cp -p ${thisOne} ${thisSafeOne}

        opDo vis_dblockBlankFiles ${thisOne}
        opDo vis_dblockUpdateFiles ${thisOne}

        opDo echo diff ${thisOne} ${thisSafeOne}
    }

    if [ $# -gt 0 ] ; then
        typeset thisOne=""
        for thisOne in ${@} ; do
            opDo processOne ${thisOne}
        done
    else
        typeset thisLine=""
    
        while read thisLine ; do
            if [ "${thisLine}" != "" ] ; then
                opDo processOne ${thisLine}
            fi
        done
    fi

    lpReturn
}


function vis_diffBlankedFiles {
    function describeF {  cat  << _EOF_
If there are any args, process those.
If there are no args, process stdin.
_EOF_
                       }

    EH_assert [[ $# -eq 2 ]]
    local thisOne="$1"
    local theOther="$2"    

    local blankedThisOne="${thisOne}-blanked.$$"
    local blankedTheOther="${theOther}-blanked.$$"

    opDo cp ${thisOne} ${blankedThisOne}
    opDo cp ${theOther} ${blankedTheOther}    
    
    opDo vis_dblockBlankFiles ${blankedThisOne} ${blankedTheOther}

    ANT_raw "running diff on  ${blankedThisOne} ${blankedTheOther}"

    opDo diff ${blankedThisOne} ${blankedTheOther}    

    opDo rm ${blankedThisOne} ${blankedTheOther}

    lpReturn
}




_CommentBegin_
*  [[elisp:(org-cycle)][| ]]  [[elisp:(blee:ppmm:org-mode-toggle)][Nat]] [[elisp:(beginning-of-buffer)][Top]] [[elisp:(delete-other-windows)][(1)]] || IIF       ::  vis_dblockUpdateFiles    [[elisp:(org-cycle)][| ]]
_CommentEnd_

function vis_dblockUpdateFiles {
    function describeF {  cat  << _EOF_
If there are any args, process those.
If there are no args, process stdin.
_EOF_
                       }

    if [ $# -gt 0 ] ; then
        typeset thisOne=""
        for thisOne in ${@} ; do
            opDo vis_dblockUpdateOneFileOrIgnore ${thisOne}
        done
    else
        typeset thisLine=""
    
        while read thisLine ; do
            if [ "${thisLine}" != "" ] ; then
                opDo vis_dblockUpdateOneFileOrIgnore ${thisLine}
            fi
        done
    fi

    lpReturn
}


_CommentBegin_
*  [[elisp:(org-cycle)][| ]]  [[elisp:(blee:ppmm:org-mode-toggle)][Nat]] [[elisp:(beginning-of-buffer)][Top]] [[elisp:(delete-other-windows)][(1)]] || IIF       ::  vis_dblockUpdateOneFileOrIgnore    [[elisp:(org-cycle)][| ]]
_CommentEnd_

function vis_dblockUpdateOneFileOrIgnore {
    function describeF {  cat  << _EOF_
Operates on a single file. To be used by other scripts.
_EOF_
                       }
    EH_assert [[ $# -eq 1 ]]

    typeset thisOne="$1"
    local thisEmacsClient=$( vis_thisEmacsClient )

    if [ ! -f "${thisOne}" ] ; then
        EH_problem "Missing ${thisOne} -- Skipped"
        lpReturn
    fi

    if egrep '^.*\+BEGIN:' ${thisOne} > /dev/null ; then
        ANT_raw "${G_myName}: Dblock Updating ${thisOne}"
        opDo ${thisEmacsClient} -e "(org-dblock-update-file-bx \"${thisOne}\")"
    else
        ANT_raw "${G_myName}: Skipping ${thisOne}"
    fi
}


_CommentBegin_
*  [[elisp:(org-cycle)][| ]]  [[elisp:(blee:ppmm:org-mode-toggle)][Nat]] [[elisp:(beginning-of-buffer)][Top]] [[elisp:(delete-other-windows)][(1)]] || IIF       ::  vis_dblockBlankFiles    [[elisp:(org-cycle)][| ]]
_CommentEnd_

function vis_dblockBlankFiles {
    function describeF {  cat  << _EOF_
If there are any args, process those.
If there are no args, process stdin.
_EOF_
    }

    if [ $# -gt 0 ] ; then
        typeset thisOne=""
        for thisOne in ${@} ; do
            opDo vis_dblockBlankOneFileOrIgnore ${thisOne}
        done
    else
        typeset thisLine=""
    
        while read thisLine ; do
            if [ "${thisLine}" != "" ] ; then
                opDo vis_dblockBlankOneFileOrIgnore ${thisLine}
            fi
        done
    fi

    lpReturn
}


_CommentBegin_
*  [[elisp:(org-cycle)][| ]]  [[elisp:(blee:ppmm:org-mode-toggle)][Nat]] [[elisp:(beginning-of-buffer)][Top]] [[elisp:(delete-other-windows)][(1)]] || IIF       ::  vis_dblockBlankOneFileOrIgnore    [[elisp:(org-cycle)][| ]]
_CommentEnd_

function vis_dblockBlankOneFileOrIgnore {
    function describeF {  cat  << _EOF_
Operates on a single file. To be used by other scripts.
_EOF_
  }
    EH_assert [[ $# -eq 1 ]]

    typeset thisOne="$1"   
    local thisEmacsClient=$( vis_thisEmacsClient )  

    if [ ! -f "${thisOne}" ] ; then
        EH_problem "Missing ${thisOne} -- Skipped"
        lpReturn
    fi
    
    if egrep '^.*\+BEGIN:' ${thisOne} > /dev/null ; then
        ANT_raw "${G_myName}: Dblock Blanking ${thisOne}"
        opDo ${thisEmacsClient} -e "(org-dblock-bx-blank-file \"${thisOne}\")"
    else
        ANT_raw "${G_myName}: Skipping ${thisOne}"
    fi
}

_CommentBegin_
*  [[elisp:(org-cycle)][| ]]  /Backwards Compat/       ::  defalias [[elisp:(org-cycle)][| ]]
_CommentEnd_


#
# Backwards compatibility.
#
_CommentBegin_
*  [[elisp:(org-cycle)][| ]]  [[elisp:(blee:ppmm:org-mode-toggle)][Nat]] [[elisp:(beginning-of-buffer)][Top]] [[elisp:(delete-other-windows)][(1)]] || IIF       ::  vis_dblockUpdateFile    [[elisp:(org-cycle)][| ]]
_CommentEnd_

function vis_dblockUpdateFile {
    vis_dblockUpdateFiles $*
}


_CommentBegin_
*  [[elisp:(org-cycle)][| ]]  /Obsoleted And UnUsed/   ::  Junk Yard [[elisp:(org-cycle)][| ]]
_CommentEnd_


_CommentBegin_
*  [[elisp:(org-cycle)][| ]]  [[elisp:(blee:ppmm:org-mode-toggle)][Nat]] [[elisp:(beginning-of-buffer)][Top]] [[elisp:(delete-other-windows)][(1)]] || IIF       ::  vis_dblockUpdateFileObsoleted    [[elisp:(org-cycle)][| ]]
_CommentEnd_

function vis_dblockUpdateFileObsoleted {
    function describeF {  cat  << _EOF_
Arg1 is prepend string.
If there is more than one arg, Arg1 is prepended to each arg as a line on stdout.
Otherwise Arg1 is prepended to each line of stdin and output  as a line on stdout.
_EOF_
  }

    #EH_assert [[ $# -gt 0 ]]

    typeset thisOne=""

    for thisOne in ${*} ; do
        opDo emacsclient -e "(org-dblock-update-file-bx \"${thisOne}\")"
    done
}


_CommentBegin_
*  [[elisp:(beginning-of-buffer)][Top]] ################ [[elisp:(delete-other-windows)][(1)]]  *End Of Editable Text*
_CommentEnd_

####+BEGIN: bx:dblock:bash:end-of-file :type "basic"
_CommentBegin_
*  [[elisp:(org-cycle)][| ]]  Common        ::  /[dblock] -- End-Of-File Controls/ [[elisp:(org-cycle)][| ]]
_CommentEnd_
#+STARTUP: showall
#local variables:
#major-mode: sh-mode
#fill-column: 90
# end:
####+END:

