#!/bin/bash

IimBriefDescription="NOTYET: Short Description Of The Module"

ORIGIN="
* Revision And Libre-Halaal CopyLeft -- Part Of ByStar -- Best Used With Blee
"

####+BEGIN: bx:dblock:bash:top-of-file :vc "cvs" partof: "bystar" :copyleft "halaal+brief"
typeset RcsId="$Id: biso.libSh,v 1.3 2016-07-25 05:23:42 lsipusr Exp $"
# *CopyLeft*
# Copyright (c) 2011 Neda Communications, Inc. -- http://www.neda.com
# See PLPC-120001 for restrictions.
# This is a Halaal Poly-Existential intended to remain perpetually Halaal.
####+END:

__author__="
* Authors: Mohsen BANAN, http://mohsen.banan.1.byname.net/contact
"


####+BEGIN: bx:dblock:lsip:bash:seed-spec :types "seedActions.bash"
SEED="
*  /[dblock]/ /Seed/: [[file:/opt/public/osmt/bin/seedActions.bash]] | 
"
if [ "${loadFiles}" == "" ] ; then
    /opt/public/osmt/bin/seedActions.bash -l $0 "$@" 
    exit $?
fi
####+END:

_CommentBegin_
####+BEGIN: bx:dblock:global:file-insert-cond :cond "./blee.el" :file "/bisos/apps/defaults/software/plusOrg/dblock/inserts/topControls.org"
*      ================
*  /Controls/:  [[elisp:(org-cycle)][Fold]]  [[elisp:(show-all)][Show-All]]  [[elisp:(org-shifttab)][Overview]]  [[elisp:(progn (org-shifttab) (org-content))][Content]] | [[elisp:(bx:org:run-me)][RunMe]] | [[elisp:(bx:org:run-me-eml)][RunEml]] | [[elisp:(delete-other-windows)][(1)]]  | [[elisp:(progn (save-buffer) (kill-buffer))][S&Q]]  [[elisp:(save-buffer)][Save]]  [[elisp:(kill-buffer)][Quit]] | 
** /Version Control/:  [[elisp:(call-interactively (quote cvs-update))][cvs-update]]  [[elisp:(vc-update)][vc-update]] | [[elisp:(bx:org:agenda:this-file-otherWin)][Agenda-List]]  [[elisp:(bx:org:todo:this-file-otherWin)][ToDo-List]] 

####+END:
_CommentEnd_

_CommentBegin_
*      ================
*      ################ CONTENTS-LIST ################
*      ======[[elisp:(org-cycle)][Fold]]====== *[Current-Info:]*  Status, Notes (Tasks/Todo Lists, etc.)
_CommentEnd_

function vis_moduleDescription {  cat  << _EOF_
*      ======[[elisp:(org-cycle)][Fold]]====== *[Related/Xrefs:]*  <<Xref-Here->>  -- External Documents 
**      ====[[elisp:(org-cycle)][Fold]]==== [[file:/libre/ByStar/InitialTemplates/activeDocs/bxISo/fullUsagePanel-en.org::Xref-BxISo][Panel Roadmap Documentation]]
*      ======[[elisp:(org-cycle)][Fold]]====== *[Module Description:]*

_EOF_
}

_CommentBegin_
*      ======[[elisp:(org-cycle)][Fold]]====== Find BxIsoId For There, or right Here
_CommentEnd_

function vis_bisoIdGetHere {
    G_funcEntry
    function describeF {  G_funcEntryShow; cat  << _EOF_
_EOF_
    }
    EH_assert [[ $# -eq 0 ]]

    typeset there=$( pwd )
    
    #vis_bisoIdFromBase $( vis_bisoBaseGetThere "${there}" )
    vis_bpoIdObtainForPath "${there}"
}


function vis_bisoIdGetThere {
    G_funcEntry
    function describeF {  G_funcEntryShow; cat  << _EOF_
_EOF_
    }
    EH_assert [[ $# -eq 1 ]]

    typeset there="$1"

    vis_bpoIdObtainForPath "${there}"
    #vis_bisoIdFromBase $( vis_bisoBaseGetThere "${there}" )
}

function vis_bisoIdFromBase {
    G_funcEntry
    function describeF {  G_funcEntryShow; cat  << _EOF_
_EOF_
    }
    EH_assert [[ $# -eq 1 ]]

    typeset isoBase="$1"

    if [ -f ${isoBase}/BAGP/acctUid:dr ] ; then
        typeset bystarUid=$( cat ${isoBase}/BAGP/acctUid:dr )
        echo ${bystarUid}
    else
        EH_problem "Bad Config: ${isoBase}"
        lpReturn 101
    fi
}

function vis_bisoBaseGetHere {
    G_funcEntry
    function describeF {  G_funcEntryShow; cat  << _EOF_
_EOF_
    }
    EH_assert [[ $# -eq 0 ]]

    typeset there=$( pwd )
    
    vis_bisoBaseGetThere "${there}"
}


function vis_bisoBaseGetThere {
    G_funcEntry
    function describeF {  G_funcEntryShow; cat  << _EOF_
_EOF_
    }
    EH_assert [[ $# -eq 1 ]]

    typeset there="$1"
    typeset here=$( pwd )

    function bisoBaseGetThere%% {
        G_funcEntry
        function describeF {  G_funcEntryShow; cat  << _EOF_
_EOF_
    }
        EH_assert [[ $# -eq 1 ]]
        typeset  baseDir=$1

        cd $baseDir
        typeset baseDir=$( pwd )

        pathToArray ${baseDir}

        set ${pathArray[@]}

        typeset bisoAcctBase=""
        typeset gotIt=""
        for thisElem in ${pathArray[@]} ; do
            if [[ "${thisElem}" == "iso" ]] ; then
                #echo "bisoAcctBase=${bisoAcctBase}"
                gotIt="true"
                break
            fi
            if [[ "${thisElem}" == "so" ]] ; then
                #echo "bisoAcctBase=${bisoAcctBase}"
                gotIt="true"
                break
            fi
            bisoAcctBase="${bisoAcctBase}/${thisElem}"
        done

        if [ "${gotIt}" == "true" ] ; then
            echo "${bisoAcctBase}"
            return 0
        else
            EH_problem "Base Not Found: ${bisoAcctBase}"
            return 101
        fi

        return
    }

    function bisoBaseGetThere {
        G_funcEntry
        function describeF {  G_funcEntryShow; cat  << _EOF_
_EOF_
                           }
        EH_assert [[ $# -eq 1 ]]
        typeset  baseDir=$1

        lpDo vis_bxoPathObtainForBxoId $(vis_bpoIdObtainForPath "${baseDir}")
    }

    # bisoIdGetThere can end with a cd anywhere, but we will end here
    # Not using inBaseDirDo, so we can better control output
    pushd ${here} > /dev/null
    bisoBaseGetThere "$@"
    popd > /dev/null

    lpReturn
}

function vis_bisoSrGetHere {
    G_funcEntry
    function describeF {  G_funcEntryShow; cat  << _EOF_
_EOF_
    }
    EH_assert [[ $# -eq 0 ]]

    typeset there=$( pwd )
    
    vis_bisoSrGetThere "${there}"
}



function vis_bisoSrGetThere {
    G_funcEntry
    function describeF {  G_funcEntryShow; cat  << _EOF_
_EOF_
    }
    EH_assert [[ $# -eq 1 ]]

    typeset there="$1"
    typeset here=$( pwd )

    function bisoBaseGetThere {
        G_funcEntry
        function describeF {  G_funcEntryShow; cat  << _EOF_
_EOF_
    }
        EH_assert [[ $# -eq 1 ]]
        typeset  baseDir=$1

        cd $baseDir
        typeset baseDir=$( pwd )

        pathToArray ${baseDir}

        set ${pathArray[@]}

        typeset bisoAcctBase=""
        typeset bisoSrBase=""
        typeset gotIt="false"
        for thisElem in ${pathArray[@]} ; do
            if [[ "${thisElem}" == "iso" ]] ; then
                #echo "bisoAcctBase=${bisoAcctBase}"
                gotIt="true"
            fi
            if [[ "${thisElem}" == "so" ]] ; then
                #echo "bisoAcctBase=${bisoAcctBase}"
                gotIt="true"
            fi
            if [ "${gotIt}" == "false" ] ; then
                bisoAcctBase="${bisoAcctBase}/${thisElem}"
            else
                # We don't want the first "/"
                if [ -z "${bisoSrBase}" ] ; then
                    bisoSrBase="${thisElem}"
                else
                    bisoSrBase="${bisoSrBase}/${thisElem}"
                fi
            fi
        done

        if [ "${gotIt}" == "true" ] ; then
            echo "${bisoSrBase}"
            return 0
        else
            EH_problem "Base Not Found: ${bisoAcctBase}"
            return 101
        fi

        return
    }

    # bisoIdGetThere can end with a cd anywhere, but we will end here
    # Not using inBaseDirDo, so we can better control output
    pushd ${here} > /dev/null
    bisoBaseGetThere "$@"
    popd > /dev/null

    lpReturn
}


_CommentBegin_
*      ################      *End Of Editable Text*
_CommentEnd_

####+BEGIN: bx:dblock:bash:end-of-file :type "basic"
_CommentBegin_
*      ======[[elisp:(org-cycle)][Fold]]======  /[dblock] -- End-Of-File Controls/
_CommentEnd_
#+STARTUP: showall
#local variables:
#major-mode: sh-mode
#fill-column: 90
# end:
####+END:
